创建型模式

	--> 用来创建对象的模式，抽象了实例化的过程，帮助一个系统独立于其他关联对象的创建、组合和表示方式。

	--> 主要功能

	    --> 1.将系统所使用的具体类的信息封装起来
	    --> 2.隐藏类的实例是如何被创建和组织的。外界对于这些对象只知道他们共同的接口，而不清楚其具体的实现细节。

    --> 正因为以上两点，创建型模式在创建什么（what）、由谁来创建（who）、以及何时创建（when）这些方面，都为设计者提供了尽可能大的灵活性。

    --> 作用

        --> A.封装创建逻辑，不仅仅是new一个对象那么简单。
        --> B.封装创建逻辑变化，客户代码尽量不改变和尽量少修改。

    --> 包括

        --> 1.单例模式（Singleton Pattern）

            --> 一个类只有一个实例,而且自行实例化并向整个系统提供这个实例。

        --> 2.工厂方法模式（Factory Pattern）

            --> 在工厂方法模式中，工厂类成为了抽象类，实际的创建工作将由其具体子类来完成。
            --> 工厂的用意是定义一个创建产品对象的工厂接口，将实际创建工作推迟到子类中。
            --> 强调的是 “单个对象” 的变化。

        --> 3.抽象工厂模式（Abstract Factory）

            --> 抽象工厂是所有工厂模式中最为抽象且最具有一般性的一种形态。
            --> 抽象工厂可以向客户提供一个接口，是的客户可以在没有指定产品的情况下，创建多个产品族中的产品对象。
            --> 强调的是 “对象系列” 的变化。

        --> 4.建造者模式（Builder Pattern）

            --> 把构造对象实例的逻辑移到了类的内部，在类的外部定义了该类的构造逻辑。
            --> 它把一个复杂对象的构造过程从对象的表示中分离出来，其直接效果是将一个复杂的对象简化为一个比较简单的目标对象。
            --> 强调的是 产品的构造过程。

        --> 5.原型模式（Prototype Pattern）

            --> 原型模式和工厂模式一样，同样对客户隐藏了对象创建工作具体的实现细节
            --> 但与通过对一个类进行实例化的构造心对象不同的是，原型模式通过复制一个现有的对象生成新对象。
			