适配器模式

    适配器不是在详细设计时添加的，而是解决正在服役的项目的问题。

    --> 把一个类的接口变换成客户端所期待的另一种接口，从而使原本因接口不匹配而无法在一起工作的两个类能够在一起工作。
    --> 加个中间类，用它来协调两类之间的关系，完成相关业务

    分类

        --> 类适配器

            类适配器的适配器和适配者是 继承 关系

        --> 对象适配器（常用）

            而对象适配器则是 引用 关系。

        对比

            --> 对象适配器支持传入一个被适配器对象，因此可以做到对多种被适配接口进行适配。

            --> 类适配器直接继承，无法动态修改，所以一般情况下对象适配器使用得更多！

    优点

        --> 可以让任何两个没有关联的类一起运行。

        --> 将目标类和适配者类解耦，通过引入一个适配器类来重用现有的适配者类，无须修改原有结构。

        --> 提高了类的复用。增加了类的透明度。同一个适配者类可以在多个不同的系统中复用。

        --> 灵活性和扩展性都非常好，可以很方便地更换适配器。

        --> 一个对象适配器可以把多个不同的适配者适配到同一个目标。

    缺点

        --> 过多地使用适配器，会让系统非常零乱，不易整体进行把握。

            比如，明明看到调用的是 A 接口，其实内部被适配成了 B 接口的实现，一个系统如果太多出现这种情况，无异于一场灾难。
            因此如果不是很有必要，可以不使用适配器，而是直接对系统进行重构。

        --> 由于 JAVA 至多继承一个类，所以至多只能适配一个适配者类，而且目标类必须是抽象类。

        --> 类适配器模式对于不支持多重类继承的语言，一次最多只能适配一个适配者类，不能同时适配多个适配者。

        --> 适配者类不能为最终类，如在Java中不能为final类。

        --> 在Java中，类适配器模式中的目标抽象类只能为接口，不能为类，其使用有一定的局限性。

        --> 对象适配器要在适配器中置换适配者类的某些方法比较麻烦。

