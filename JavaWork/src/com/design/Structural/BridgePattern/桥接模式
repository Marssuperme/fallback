桥接模式

    --> 用于把抽象化与实现化解耦，使得二者可以独立变化。
    --> 这种类型的设计模式属于结构型模式，它通过提供抽象化和实现化之间的桥接结构，来实现二者的解耦。

    --> 这种模式涉及到一个作为桥接的接口，使得实体类的功能独立于接口实现类。这两种类型的类可被结构化改变而互不影响。

    --> 桥接模式基于单一职责原则，如果系统中的类存在多个变化的维度，通过该模式可以将这几个维度分离出来，然后进行独立扩展。
    --> 这些分离开来的维度，通过在抽象层持有其他维度的引用来进行关联，就好像在两个维度间搭了桥一样，所以叫桥接模式。

    角色

        --> 抽象类(Abstraction)

            --> 通常在这个对象里面，要维护一个实现部分的对象引用，在抽象对象里面的方法，需要调用实现部分的对象来完成。
            --> 这个对象里面的方法，通常都是跟具体的业务相关的方法。

        --> 扩展抽象类(Refined Abstraction)

            --> 通常在这些对象里面，定义跟实际业务相关的方法
            --> 这些方法的实现通常会使用Abstraction中定义的方法，也可能需要调用实现部分的对象来完成。

        --> 实现类接口(Implementor)

            --> 这个接口不用和Abstraction里面的方法一致，通常是由Implementor接口提供基本的操作
            --> 而Abstraction里面定义的是基于这些基本操作的业务方法
            --> 也就是说Abstraction定义了基于这些基本操作的较高层次的操作。

        --> 具体实现类(ConcreteImplementor)

    优点

        --> 实现了抽象和实现部分的分离

            --> 桥接模式分离了抽象部分和实现部分，从而极大的提供了系统的灵活性，让抽象部分和实现部分独立开来，
            --> 分别定义接口，这有助于系统进行分层设计，从而产生更好的结构化系统。
            --> 对于系统的高层部分，只需要知道抽象部分和实现部分的接口就可以了。

        --> 更好的可扩展性

            --> 由于桥接模式把抽象部分和实现部分分离了，从而分别定义接口，
            --> 这就使得抽象部分和实现部分可以分别独立扩展，而不会相互影响，大大的提供了系统的可扩展性。

        --> 可动态的切换实现

            --> 由于桥接模式实现了抽象和实现的分离，所以在实现桥接模式时，就可以实现动态的选择和使用具体的实现。

        --> 实现细节对客户端透明，可以对用户隐藏实现细节。

    缺点

        --> 桥接模式的引入增加了系统的理解和设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计和编程。

        --> 桥接模式要求正确识别出系统中两个独立变化的维度，因此其使用范围有一定的局限性。