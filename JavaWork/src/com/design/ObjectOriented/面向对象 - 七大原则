七大原则

    1.单一职责原则（Single Responsibility Principle）

        --> 每一个类应该专注于做一件事情。

    2.里氏替换原则（Liskov Substitution Principle）

        --> 超类存在的地方，子类是可以替换的。

    3.依赖倒置原则（Dependence Inversion Principle）

        --> 实现尽量依赖抽象，不依赖具体实现。上层依赖下层
        --> 采用依赖倒置原则可以减少类间的耦合性，提高系统的稳定性，减少并行开发引起的风险，提高代码的可读性和可维护性。

    4.接口隔离原则（Interface Segregation Principle）

        --> 应当为客户端提供尽可能小的单独的接口，而不是提供大的总的接口。
        --> 接口是设计时对外部设定的约定，通过分散定义多个接口，可以预防外来变更的扩散，提高系统的灵活性和可维护性。
        --> 从大局来说Java的接口可以实现多继承就是接口隔离原则的基础保障。

    5.迪米特法则（Law Of Demeter）

        --> 又叫最少知识原则，一个软件实体应当尽可能少的与其他实体发生相互作用。
        --> 不是直接耦合依赖的类最好不要作为局部变量的形式出现在类的内部。

    6.开闭原则（Open Close Principle）

        --> 面向扩展开放，面向修改关闭。
        --> 封装变化，是实现开放封闭原则的重要手段
        --> 对于经常发生变化的状态，一般将其封装为一个抽象，拒绝滥用抽象，只将经常变化的部分进行抽象。

    7.组合/聚合复用原则（Composite/Aggregate Reuse Principle CARP）

        --> 尽量使用合成/聚合达到复用，尽量少用继承。原则： 一个类中有另一个类的对象。