组合模式

    --> 又称为 部分整体模式, 对象组的树形结构。
    --> 把具有相似的一组对象当做一个对象处理，用一种树状的结构来组合对象，
        再提供统一的方法去访问相似的对象，以此忽略掉对象与对象容器间的差别。

    --> 树枝和叶子实现统一接口，树枝内部组合该接口。

    角色

        --> 抽象组件(Component)：

            --> 为组合中的对象声明接口，让客户端可以通过这个接口来访问和管理整个对象结构，
            --> 可以在里面为定义的功能提供缺省的实现
            --> 例子： Dinner

        --> 容器组件(Composite)：

            --> 继承抽象组件，实现抽象组件中与叶子组件相关的操作
            --> 例子： Food类重写了get，set方法。

        --> 叶子组件(Leaf)：

            --> 定义和实现叶子对象的行为，不再包含其它的子节点对象
            --> 例子： Rices, Noodles, Juice, Soup

    使用情景

        --> 部分、整体场景，如树形菜单，文件、文件夹的管理。

        --> 可以用来表示对象的部分-整体层次结构，把整体和部分的操作统一起来，
        --> 使得层次结构实现更简单，从外部来使用这个层次结构也简单；
        --> 组合模式提供的主要功能：统一的使用组合结构中的所有对象；

    优点

        --> 让客户端更加简单，客户端不需要再操心面对的是组合对象还是叶节点对象，他们只需要对整个结构调用一个方法并执行操作就可以了。

    缺点

        --> 在使用组合模式时，其叶子和树枝的声明都是实现类，而不是接口，违反了依赖倒置原则。