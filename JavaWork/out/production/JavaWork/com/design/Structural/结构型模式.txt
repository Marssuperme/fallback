结构型模式

    --> 讨论的是类和对象的结构，它采用继承机制来组合接口或实现（类结构型模式），
        或者通过组合一些对象实现新的功能（对象结构型模式）。

    --> 这些结构型模式在某些方面具有很大的相似性，但侧重点各有不同。

    --> 包括

    　　--> 1.代理模式（Proxy）

            --> 为其他对象提供一种代理以控制对该对象的访问。

    　　--> 2.装饰模式（Decorator）

            --> 动态的给一个对象添加一些额外的职责。就增加功能来说，装饰模式比生成子类更灵活。

    　　--> 3.适配器模式（Adapter）

            --> 将一个类的接口变换成客户端所期待的接口，从而使原本因接口不匹配而无法在一起工作的两个类能够在一起工作。

    　　--> 4.组合模式（Composite）

            --> 也叫合成模式，将对象组合成属性结构一表示“部分-整体”的层次结构，使得用户对单个对象和组成对象的使用具有一致性。

    　　--> 5.桥梁模式（Bridge）

            --> 也叫桥接模式，将抽象和实现解耦，是的两者可以独立的变化。

    　　--> 6.外观模式（Facade）

            --> 也叫门面模式，要求一个子系统的外部与其内部的通信必须通过一个统一的对象进行，外观模式提供一个高层次的接口，使得子系统更易于使用。

    　　--> 7.亨元模式（Flyweight）

            --> 是池技术的重要实现方式，使用共享对象可有效的支持大量的细粒度的对象。