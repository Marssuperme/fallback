享元模式

    --> 运用共享技术有效的支持大量细粒度的对象。
    --> 主要用于减少创建对象的数量，以减少内存占用和提高性能。
    --> 它提供了减少对象数量从而改善应用所需的对象结构的方式。

    --> 享元模式尝试重用现有的同类对象，如果未找到匹配的对象，则创建新对象。

    内部状态(Internal State)：

        --> 固定不变可共享的的部分，存储在享元对象内部

    外部状态(External State)：

        --> 可变不可共享的部分，一般由客户端传入享元对象内部

    角色：

        --> 抽象享元(Flyweight)

            --> 给出一个抽象接口，以规定出所有具体享元角色需要实现的方法。
            --> 通过这个接口，享元对象可以接受并作用于外部状态；

        --> 具体享元(ConcreteFlyweight)

            --> 实现抽象享元角色所规定出的接口。如果有内蕴状态的话，必须负责为内蕴状态提供存储空间。
            --> 继承或实现Flyweight并为内部状态增加存储空间。

        --> 享元工厂(FlyweightFactory)

            --> 创建并管理共享的享元对象，并对外提供访问共享享元对象的接口。

    应用实例：

        --> 系统有大量相似对象
        --> JAVA 中的 String，如果有则返回，如果没有则创建一个字符串保存在字符串缓存池里面。
        --> 数据库的数据池。

    优点：

        --> 大大减少对象的创建，降低系统的内存，使效率提高。

    缺点：

        --> 提高了系统的复杂度，需要分离出外部状态和内部状态，
        --> 而且外部状态具有固有化的性质，不应该随着内部状态的变化而变化，否则会造成系统的混乱。

    注意事项： 1、注意划分外部状态和内部状态，否则可能会引起线程安全问题。 2、这些类必须有一个工厂对象加以控制。