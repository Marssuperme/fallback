代理模式

    --> 一个类代表另一个类的功能。这种类型的设计模式属于结构型模式。
    --> 在代理模式中，我们创建具有现有对象的对象，以便向外界提供功能接口。
    --> 为其他对象提供一种代理以控制对这个对象的访问。

    --> 角色

        --> 抽象对象接口（Subject）

            --> 抽象对象，声明真实角色与代理角色的公共接口。
            --> 例子： Dinner

        --> 真实对象类（RealSubject）

            --> 真实对象，代理角色所代表的真实对象，最终引用对象。
            --> 例子： Sheldon

        --> 代理对象类（Proxy）

            --> 包含对真实对象的引用从而操作真实对象， 相当于对真实对象进行封装。
            --> 例子： DeliverProxy

    --> 优点

        --> 协调调用者和被调用者，降低了系统的耦合度
        --> 代理对象作为客户端和目标对象之间的中介，起到了保护目标对象的作用

    --> 缺点

        --> 由于在客户端和真实主题之间增加了代理对象，因此会造成请求的处理速度变慢；
        --> 实现代理模式需要额外的工作（有些代理模式的实现非常复杂），从而增加了系统实现的复杂度。

    --> 1、和适配器模式的区别：适配器模式主要改变所考虑对象的接口，而代理模式不能改变所代理类的接口。
    --> 2、和装饰器模式的区别：装饰器模式为了增强功能，而代理模式是为了加以控制。