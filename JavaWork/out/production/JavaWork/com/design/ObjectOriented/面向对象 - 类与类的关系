类与类的关系（耦合度从低到高）

    --> 依赖（Dependency）

        --> 一般而言，依赖关系在Java语言中体现为局域变量、方法的形参，或者对静态方法的调用。
        --> 不持有引用
        --> 具体表现：局部变量、函数参数、返回值
        --> 用实心带箭头虚线表示，从使用类指向依赖类

    --> 关联（Association）

        --> 使一个类知道另一个类的属性和方法
        --> 持有引用
        --> 具体表现：成员变量
        --> 实心箭头的实线表示，箭头指向被关联类，另外这个可以双向，一对多或多对多

    --> 聚合（Aggregation）

        --> 和关联一样是通过成员变量来表现的，不过关联是处于同一层次的
        --> 而聚合则 是 整体和局部 层次的
        --> 用 空心菱形加实线箭头 表示。

    --> 组合（Composition）

        --> 和聚合类似，只是程度更加强烈，共生死，组合类负责被组合类的生命周期
        --> 用 实心菱形加实线箭头表示 表示。
        --> 使用构造方法来实现

    --> 继承/泛化（Generalization）

        --> 继承表示类与类（或者接口与接口）之间的父子关系。
        --> 一个是父类，一个是子类，用 空心三角箭头的实线 表示
        --> 从子类指向父类，或子接口指向父接口。

    --> 实现（Realization）

        --> 一个类实现接口，重写相关方法，用 空心三角箭头的虚线 表示

    关联、聚合、组合只能配合语义，结合上下文才能够判断出来

    而只给出一段代码让我们判断是关联，聚合，还是组合关系，则是无法判断的。





