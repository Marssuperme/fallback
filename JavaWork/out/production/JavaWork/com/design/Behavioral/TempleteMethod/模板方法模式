模板方法模式

    --> 定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。
    --> 模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。

    --> 在不改变模板结构的前提下在子类中重新定义模板中的内容。
        --> 模板方法模式基于 “继承” 来实现


    角色
        --> 抽象模板结构（Abstract Class）
            --> 例子： Dinner

        --> 具体模板（Concrete Class）
            --> 例子： NoodlesDinner、RicesDinner

    优点

        --> 提高代码复用性
            --> 将相同部分的代码放在抽象的父类中

        --> 提高了拓展性
            --> 将不同的代码放入不同的子类中，通过对子类的扩展增加新的行为

        --> 实现了反向控制
            --> 通过一个父类调用其子类的操作，通过对子类的扩展增加新的行为，实现了反向控制 & 符合“开闭原则”

        1、封装不变部分，扩展可变部分。
        2、提取公共代码，便于维护。
        3、行为由父类控制，子类实现。

    缺点

        --> 每一个不同的实现都需要一个子类来实现，导致类的个数增加，使得系统更加庞大。

    使用场景

        --> 1、有多个子类共有的方法，且逻辑相同。
        --> 2、重要的、复杂的方法，可以考虑作为模板方法。

    注意事项

        --> 为防止恶意操作，一般模板方法都加上 final 关键词。
