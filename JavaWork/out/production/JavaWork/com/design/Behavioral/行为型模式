行为型模式

    --> 关注的是对象的行为，用来解决对象之间的联系问题。

    --> 包括

    　　--> 1.模板方法模式（Template Method）

            --> 定义一个操作中的算法的框架，而将一些步骤延迟到子类中，使得子类可以在不改变算法的结构的情况下重新定义该算法的某些特定步骤。

    　　--> 2.命令模式（Command）

            --> 是一种高内聚的模式，讲一个请求封装成一个对象，从而使用不同的请求吧客户端参数化。
            --> 对请求排队或者记录请求日志，可以提供命令的撤销和恢复功能。

    　　--> 3.责任链模式（Chain of Responsibility）

            --> 使多个对象都有机会处理请求，从而避免了请求的发送者和接受者之间的耦合关系。
            --> 将这些对象连城一条链，并沿着这条链传递该请求，直到有对象处理它为止。

    　　--> 4.策略模式（Strategy）

            --> 也叫政策模式，定义一组算法，将每个算法都封装起来，并且使他们之间可以互换。

    　　--> 5.迭代器模式（Iterator）

            --> 提供一种方法访问一个容器对象中的各个元素，而又不需要暴露该对象的内部细节。

    　　--> 6.中介者模式（Mediator）

            --> 用一个中介对象封装一系列对象交互，中介者使各对象不需要显示相互作用，从而使其耦合松散，而且可以独立的改变它们之间的交互。

    　　--> 7.观察者模式（Observer）

            --> 也叫发布订阅模式，定义对象间的一对多的依赖关系，是的每当一个对象改变状态，则所有依赖于它的对象都会得到通知并被自动更新。

    　　--> 8.备忘录模式（Memento）

            --> 在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保持这个状态。

    　　--> 9.访问者模式（Visitor）
            --> 封装一些作用于某种数据结构中的各元素的操作，它可以在不改变数据结构的前提下定义作用于这些元素的新的操作。

    　　--> 10.状态模式（State）

            --> 当一个对象内在状态改变时允许其改变行为，这个对象看起来像改变了其类型，状态模式的核心是封装，状态的变更会引起行为的变更。

    　　--> 11.解释器模式（Interpreter）

            --> 给定一门语言，定义它的文法的一种表示，并定义一个解释器，该解释器使用该文法表示来解释语言中的句子。