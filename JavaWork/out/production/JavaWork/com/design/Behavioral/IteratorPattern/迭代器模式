迭代器模式

    --> Java 和 .Net 编程环境中非常常用的设计模式。
    --> 这种模式用于顺序访问集合对象的元素，不需要知道集合对象的底层表示, 不暴露该对象的内部表示。

    --> Java中的容器类提供了相应的迭代器，而不需要我们另外去实现了。比如Util包中的Iterator接口

    角色

        --> 迭代器角色(Iterator)

            --> 定义访问和遍历元素的接口；

        --> 具体迭代器角色(ConcreteIterator)

            --> 实现接口中的方法，并且记录遍历的当前位置；

        --> 容器角色(Container)

            --> 提供创建具体迭代器角色的接口；

        --> 具体容器角色(ConcreteContainer)

            --> 具体迭代器角色与容器相关联。

    优点：

        1、它支持以不同的方式遍历一个聚合对象。
        2、迭代器简化了聚合类。
        3、在同一个聚合上可以有多个遍历。
        4、在迭代器模式中，增加新的聚合类和迭代器类都很方便，无须修改原有代码。

    缺点：

        由于迭代器模式将存储数据和遍历数据的职责分离，增加新的聚合类需要对应增加新的迭代器类，
        类的个数成对增加，这在一定程度上增加了系统的复杂性。

    使用场景：

        1、访问一个聚合对象的内容而无须暴露它的内部表示。
        2、需要为聚合对象提供多种遍历方式。
        3、为遍历不同的聚合结构提供一个统一的接口。