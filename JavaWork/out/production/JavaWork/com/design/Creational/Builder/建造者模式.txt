建造者模式

    使用多个简单的对象一步一步构建成一个复杂的对象。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。

    一个 Builder 类会一步一步构造最终的对象。该 Builder 类是独立于其他对象的。

    用户只需要给出指定复杂对象的类型和内容；

    建造者模式负责按顺序创建复杂对象（把内部的建造过程和细节隐藏起来)

    角色

        --> 抽象建造者(Builder)
            --> 给出一个抽象结论，以规范产品对象的各个组成成分的建造。
            --> 这个接口规定要实现复杂对象的那些部分的创建，并不涉及具体的对象部件的创建。
            --> 例子： DinnerBuilder

        --> 具体建造者(ConcreteBuilder)
            --> 实现Builder接口，针对不同的商业逻辑，具体化复杂对象的各部分的创建。在构造过程完成后，提供产品的实例。
            --> 例子： Cooker

        --> 指导者(Director)
            --> 调用具体建造者来创建复杂对象的各个部分，在指导者中不涉及具体产品的信息，只负责保证对象各部分完整创建或按某种顺序创建。
            --> 例子： Waiter

        --> 产品类(Product)
            --> 要创建的复杂对象。
            --> 例子： Dinner

    优点

        --> 易于解耦
            将产品本身与产品创建过程进行解耦，可以使用相同的创建过程来得到不同的产品。也就说细节依赖抽象。

        --> 易于精确控制对象的创建
            将复杂产品的创建步骤分解在不同的方法中，使得创建过程更加清晰。

        --> 易于拓展
            增加新的具体建造者无需修改原有类库的代码，易于拓展，符合“开闭原则“。

        --> 每一个具体建造者都相对独立，而与其他的具体建造者无关，因此可以很方便地替换具体建造者或增加新的具体建造者，
        用户使用不同的具体建造者即可得到不同的产品对象。

    缺点

        --> 建造者模式所创建的产品一般具有较多的共同点，其组成部分相似；
            如果产品之间的差异性很大，则不适合使用建造者模式，因此其使用范围受到一定的限制。

        --> 如果产品的内部变化复杂，可能会导致需要定义很多具体建造者类来实现这种变化，导致系统变得很庞大。



    例子
        --> Jdk中的建造者模式

            --> 1. java.lang.StringBuilder.append()
            --> 2. java.lang.StringBuffer.append()
            --> 3. java.sql.PreparedStatement

        --> 点餐