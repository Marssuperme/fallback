
单例模式 

    --> 一般写工具类，线程池，缓存，数据库等可以用到。

	--> 作为对象的创建模式, 单例模式确保某一个类只有一个实例, 而且自行实例化并向整个系统提供这个实例, 这个类称为单例类.
	    --> 1.只有一个实例
		--> 2.必须自己创建自己的唯一实例
		--> 3.必须给所有其他对象提供这一个实例

单例类：
		
	--> 1.饿汉式（EagerSingleton）

		--> 当类装载的时候就会创建类的实例
		--> 浪费内存, 节省时间
		
	--> 2.懒汉式（LazySingleton）

		--> 利用 synchronized 同步化, 多线程环境可用
		--> 浪费判断的时间, 节省内存
	
	--> 3.双检锁/双重校验锁（DCL, 即 double-checked locking）（DCLSingleton）

		--> 采用双锁机制, 安全且在多线程先保持高性能
		--> 使用 volatile 关键字, 不会被本地线程缓存, 所有对该变量的读写都是直接操作共享内存, 从而确保多个线程能正确的处理该变量.
		--> 综合使用了Java的类级内部类和多线程缺省同步锁的知识, 很巧妙地同时实现了延迟加载和线程安全.
		--> volatile关键字会屏蔽Java虚拟机所做的一些代码优化，会导致系统运行效率降低，而更好的写法是使用静态内部类来实现单例！
	
	--> 4.登记式/静态内部类（RegisterSingleton）

		--> 利用了 classloader 机制来保证初始化 instance 时只有一个线程
		--> 执行一个域的访问, 因此延迟初始化并没有增加任何访问成本.
	
	--> 5.枚举 （EnumSingleton）

		--> 单元素的枚举类型已经成为实现Singleton的最佳方法.
		--> 用枚举来实现单例非常简单, 只需要编写一个包含单个元素的枚举类型即可.
		--> 使用枚举来实现单实例控制会更加简洁, 而且无偿地提供了序列化机制.
		--> 并由JVM从根本上提供保障，绝对防止多次实例化, 是更简洁、高效、安全的实现单例的方式.

总结：
	--> 一般情况下，不建议使用  2.懒汉式, 建议使用  1.饿汉式	
	--> 只有在要明确实现 lazy loading 效果时, 才会使用   4.登记式/静态内部类
	--> 如果涉及到反序列化创建对象时，可以尝试使用   5.枚举 
	--> 如果有其他特殊的需求, 可以考虑使用   3.双检锁/双重校验锁
	
	--> 使用单例模式 节省内存, 限制了实例的个数, 有利于 Java 垃圾回收（GC）
	
	