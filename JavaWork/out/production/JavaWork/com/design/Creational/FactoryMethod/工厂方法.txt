工厂方法

    也叫虚拟构造器模式（Virtual Constructor）或者多态工厂模式（Polymorphic Factory）

    工厂方法模式定义了一个创建对象的接口，但由子类决定要实例化的类是哪一个，也就是说工厂方法模式让实例化推迟到子类。

        --> 1、一个调用者想创建一个对象，只要知道其名称就可以了。
        --> 2、扩展性高，如果想增加一个产品，只要扩展一个工厂类就可以。
        --> 3、屏蔽产品的具体实现，调用者只关心产品的接口。

    如果使用工厂模式，就需要引入一个工厂类，会增加系统的复杂度。

    角色

        --> 抽象工厂(Factory)
            --> 这是工厂方法模式的核心，它与应用程序无关。是具体工厂角色必须实现的接口或者必须继承的父类
            --> 在java中它由抽象类或者接口来实现。
            --> 例子：Dinner

        --> 具体工厂(ConcreteFactory)
            --> 它含有和具体业务逻辑有关的代码。由应用程序调用以创建对应的具体产品的对象。
            --> 在java中它由具体的类来实现。
            --> 例子：DinnerBreads、DinnerNoodles、DinnerRices

        --> 抽象产品(Product)
            --> 它是具体产品继承的父类或者是实现的接口。
            --> 在java中一般有抽象类或者接口来实现。
            --> 例子：Food

        --> 具体产品(ConcreteProduct)
            --> 具体工厂角色所创建的对象就是此角色的实例。
            --> 在java中由具体的类来实现。
            --> 例子：FoodBreads、FoodNoodles、FoodRices

    --> 调用的时候，只需要实例化具体工厂类，就可以得到具体产品类

    --> 新增一种产品时，只需要增加相应的具体产品类和相应的具体工厂类即可

缺点

    --> 在一定程度上增加了系统的复杂度；同时，有更多的类需要编译和运行，会给系统带来一些额外的开销；